plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.0'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

// plain.jar 생성 방지
jar {
	enabled = false
}

// jar 파일명 변경
bootJar {
	archiveFileName = "${rootProject.name}.jar"
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// Querydsl
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
}

// Q클래스 생성 디렉토리 지정 (build/generated/querydsl)
def generated = layout.buildDirectory.dir("generated/querydsl")

// JavaCompile에 생성 디렉토리 지정
tasks.withType(JavaCompile).configureEach {
	options.getGeneratedSourceOutputDirectory().set(generated)
}

// 소스 경로(src/main/java)에 Q디렉토리 포함
sourceSets {
	main.java.srcDirs += [ generated ]
}

// gradle clean 시 Q파일 삭제
clean {
	delete generated.get().asFile
}

tasks.named('test') {
	useJUnitPlatform()
}
